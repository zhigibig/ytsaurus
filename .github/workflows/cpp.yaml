name: C++ CI

on:
  push:
    branches:
      - test/yql2
      - stable/[0-9]+\.[0-9]+

jobs:
  start-vm:
    name: Start VM
    runs-on: trampoline
    outputs:
      label: ${{ steps.start-yc-runner.outputs.label }}
      instance-id: ${{ steps.start-yc-runner.outputs.instance-id }}
    steps:
      - name: Start YC runner
        id: start-yc-runner
        uses: yc-actions/yc-github-runner@v1
        with:
          mode: start
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          folder-id: ${{ vars.YC_FOLDER_ID }}
          image-id: ${{ vars.YC_DEFAULT_IMAGE_ID }}
          zone-id: ${{ vars.YC_ZONE_ID }}
          subnet-id: ${{ vars.YC_SUBNET_ID }}
          cores: 16
          memory: 32GB
          core-fraction: 100
          disk-type: network-ssd-nonreplicated
          disk-size: 279GB

  checkout:
    name: Checkout sources
    needs: start-vm
    runs-on: ${{ needs.start-vm.outputs.label }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: ytsaurus

      - name: Checkout ydb
        uses: actions/checkout@v3
        with:
          repository: ydb-platform/ydb
          ref: 2c1c42926da1c9de23cac9f100df8b3706dd6377
          path: ydb

  check:
    name: Run checks
    needs:
      - start-vm
      - checkout
    runs-on: ${{ needs.start-vm.outputs.label }}
    steps:
      - name: Prepare python virtual environment
        shell: bash
        run: |
          python3.11 -m venv ../venv

      - name: Build Go
        shell: bash
        run: |
          cd ../ytsaurus/ytsaurus/yt/chyt/controller/cmd/chyt-controller
          export HOME=${RUNNER_WORKSPACE}
          /opt/go/bin/go build

      - name: Configure
        shell: bash
        run: |
          mkdir -p ../build
          cd ../build
          rm -rf *
          cmake \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=../ytsaurus/ytsaurus/clang.toolchain \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            ../ytsaurus/ytsaurus

          mkdir -p ../build_debug
          cd ../build_debug
          rm -rf *
          cmake \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_TOOLCHAIN_FILE=../ytsaurus/ytsaurus/clang.toolchain \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            ../ytsaurus/ytsaurus

          sudo apt-get -y install antlr3 libaio1 libaio-dev

          sed -i 's/ythrow yexception() << what;/abort();/' ../ytsaurus/ydb/ydb/library/yql/minikql/codegen/codegen.cpp

          mkdir -p ../build_qt
          cd ../build_qt
          rm -rf *
          cmake \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_C_COMPILER_LAUNCHER=/usr/local/bin/ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=/usr/local/bin/ccache \
            -DCMAKE_TOOLCHAIN_FILE=../ytsaurus/ydb/clang.toolchain \
            -DCMAKE_POSITION_INDEPENDENT_CODE=On \
            ../ytsaurus/ydb

      - name: Build
        shell: bash
        run: |
          cd ../build
          export CCACHE_BASEDIR="$(realpath ..)"
          export CCACHE_REMOTE_ONLY=true
          export CCACHE_REMOTE_STORAGE="${{ vars.CCACHE_REMOTE_STORAGE }}"
          ninja

          cd ../build_debug
          ninja ytserver-all

          cd ../build_qt
          ninja libyqlplugin.so
          ninja libdatetime2_udf.so
          ninja libhyperloglog_udf.so
          ninja libjson_udf.so
          ninja libset_udf.so
          ninja libtop_udf.so
          ninja libyson2_udf.so
          ninja libdigest_udf.so
          ninja libhyperscan_udf.so
          ninja libmath_udf.so
          ninja libstat_udf.so
          ninja libtopfreq_udf.so
          ninja libdsv_udf.so
          ninja libip_udf.so
          ninja libpire_udf.so
          ninja libunicode_udf.so
          ninja libhistogram_udf.so
          ninja libjson2_udf.so
          ninja libre2_udf.so
          ninja libstring_udf.so
          ninja liburl_udf.so
          ninja mrjob

      - name: Build Python packages
        shell: bash
        run: |
          source ../venv/bin/activate
          YTSAURUS_COMMIT_HASH=${GITHUB_SHA} bash ./ytsaurus/yt/python/packages/build_ytsaurus_packages.sh --ytsaurus-source-path $(pwd)/ytsaurus --ytsaurus-build-path ../build

      - name: DockerHub login
        shell: bash
        run: |
          echo '${{ secrets.DOCKER_HUB_PASSWORD }}' | docker login --username ${{ secrets.DOCKER_HUB_LOGIN }} --password-stdin

      - name: Download SPYT
        uses: robinraju/release-downloader@v1.8
        with:
          latest: true
          fileName: "spyt-1.69.tar"

      - name: Download benchmarks
        uses: robinraju/release-downloader@v1.8
        with:
          latest: true
          fileName: "benchmark-0.0.1.tgz"

      - name: Build and push ytsaurus docker images
        shell: bash
        run: |
          mkdir -p ../docker-ytsaurus-build
          mkdir -p ../docker-local-build
          mkdir -p ../docker-query-tracker-build

          tar -xf spyt-1.69.tar -C ../build

          if [[ $GITHUB_REF =~ main$ ]];
          then
            IMAGE_TAG=dev
          elif [[ $GITHUB_REF =~ releases ]];
          then
            IMAGE_TAG=dev-${GITHUB_REF#refs/*/stable/}
          elif [[ $GITHUB_REF =~ test/yql2 ]];
          then
            IMAGE_TAG=nadya73-test-yql
          else
            IMAGE_TAG=nopush
          fi
          IMAGE_TAG_DEBUG=${IMAGE_TAG}-debug

          bash ./ytsaurus/yt/docker/ytsaurus/build.sh --ytsaurus-source-path $(pwd)/ytsaurus --ytsaurus-build-path ../build --ytsaurus-spyt-release-path ../build/spyt_release  --output-path ../docker-ytsaurus-build --image-tag ${IMAGE_TAG}

          bash ./ytsaurus/yt/docker/query-tracker/build.sh --ytsaurus-source-path $(pwd)/ytsaurus --ytsaurus-build-path ../build --qt-build-path ../build_qt --output-path ../docker-query-tracker-build --image-tag ${IMAGE_TAG}

          bash ./ytsaurus/yt/docker/local/build.sh --ytsaurus-source-path $(pwd)/ytsaurus --ytsaurus-build-path ../build --output-path ../docker-local-build --image-tag ${IMAGE_TAG}

          mv ../build_debug/yt/yt/server/all/ytserver-all ../build/yt/yt/server/all/ytserver-all

          bash ./ytsaurus/yt/docker/ytsaurus/build.sh --ytsaurus-source-path $(pwd)/ytsaurus --ytsaurus-build-path ../build --ytsaurus-spyt-release-path ../build/spyt_release --output-path ../docker-ytsaurus-build --image-tag ${IMAGE_TAG_DEBUG}

          bash ./ytsaurus/yt/docker/local/build.sh --ytsaurus-source-path $(pwd)/ytsaurus --ytsaurus-build-path ../build --output-path ../docker-local-build --image-tag ${IMAGE_TAG_DEBUG}

          if [[ $IMAGE_TAG != "nopush" ]];
          then
              docker push ytsaurus/ytsaurus:${IMAGE_TAG}
              docker tag ytsaurus/ytsaurus:${IMAGE_TAG} ytsaurus/ytsaurus-nightly:${IMAGE_TAG}-${GITHUB_SHA}
              docker push ytsaurus/ytsaurus-nightly:${IMAGE_TAG}-${GITHUB_SHA}

              docker push ytsaurus/ytsaurus:${IMAGE_TAG_DEBUG}
              docker tag ytsaurus/ytsaurus:${IMAGE_TAG_DEBUG} ytsaurus/ytsaurus-nightly:${IMAGE_TAG_DEBUG}-${GITHUB_SHA}
              docker push ytsaurus/ytsaurus-nightly:${IMAGE_TAG_DEBUG}-${GITHUB_SHA}

              docker push ytsaurus/query-tracker:${IMAGE_TAG}
              docker tag ytsaurus/query-tracker:${IMAGE_TAG} ytsaurus/query-tracker-nightly:${IMAGE_TAG}-${GITHUB_SHA}
              docker push ytsaurus/query-tracker-nightly:${IMAGE_TAG}-${GITHUB_SHA}
          fi

          if [[ $IMAGE_TAG == 'dev' ]];
          then
            docker tag ytsaurus/ytsaurus-nightly:${IMAGE_TAG}-${GITHUB_SHA} ytsaurus/ytsaurus-nightly:latest
            docker push ytsaurus/ytsaurus-nightly:latest
          fi

      - name: Docker systest
        shell: bash
        run: |
          mkdir -p ../docker-systest-build
          bash ./ytsaurus/yt/docker/systest/build.sh --ytsaurus-source-path $(pwd)/ytsaurus  --ytsaurus-build-path ../build --benchmarks-path benchmark-0.0.1.tgz --output-path ../docker-systest-build --image-tag latest
          docker push ytsaurus/ytsaurus-systest:latest

      - name: Kube
        shell: bash
        run: |
          export HOME=/root
          bash yt/systest/scripts/minikube.sh --image ytsaurus/ytsaurus-nightly:latest --ytsaurus-source-path $(pwd)/ytsaurus

      - name: Unittests
        shell: bash
        run: |
          cp ./ytsaurus/yt/yt/scripts/run_unittests.sh ../build/
          cd ../build
          ./run_unittests.sh

      - name: Prepare pytest environment
        shell: bash
        run: |
          ytsaurus/yt/yt/scripts/prepare_pytest_environment.sh

      - name: Integration tests
        shell: bash
        run: |
          ytsaurus/yt/yt/scripts/run_integration_tests.sh

      - name: Python tests
        shell: bash
        run: |
          ytsaurus/yt/yt/scripts/run_python_tests.sh

      - name: Testmo unittests upload
        shell: bash
        run: |
          export TESTMO_TOKEN="${{ secrets.NEBIUS_TESTMO_TOKEN }}"
          testmo automation:run:submit --instance https://nebius.testmo.net --project-id 4 --name "Run ${{ github.run_id }}" --source "unittests" --results "../build/junit-*.xml"


  stop-vm:
    name: Stop VM
    needs:
      - start-vm
      - check
    runs-on: trampoline
    if: ${{ always() }}
    steps:
      - name: Stop YC runner
        uses: yc-actions/yc-github-runner@v1
        with:
          mode: stop
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-vm.outputs.label }}
          instance-id: ${{ needs.start-vm.outputs.instance-id }}


