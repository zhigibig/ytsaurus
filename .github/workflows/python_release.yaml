name: Release python

on:
  push:
    tags:
      - 'python-test/ytsaurus-*/[0-9]+.[0-9]+.*'
      - 'python/ytsaurus-*/[0-9]+.[0-9]+.*'

jobs:
  start-vm:
    name: Start VM
    runs-on: trampoline
    outputs:
      label: ${{ steps.start-yc-runner.outputs.label }}
      instance-id: ${{ steps.start-yc-runner.outputs.instance-id }}
    steps:
      - name: Start YC runner
        id: start-yc-runner
        uses: yc-actions/yc-github-runner@v1
        with:
          mode: start
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          folder-id: ${{ vars.YC_FOLDER_ID }}
          image-id: ${{ vars.YC_DEFAULT_IMAGE_ID }}
          zone-id: ${{ vars.YC_ZONE_ID }}
          subnet-id: ${{ vars.YC_SUBNET_ID }}
          cores: 16
          memory: 32GB
          core-fraction: 100
          disk-type: network-ssd-nonreplicated
          disk-size: 93GB

  checkout:
    name: Checkout sources
    needs: start-vm
    runs-on: ${{ needs.start-vm.outputs.label }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

  build:
    name: Run build
    needs:
      - start-vm
      - checkout
    runs-on: ${{ needs.start-vm.outputs.label }}
    outputs:
      release_type: ${{ steps.tag.outputs.RELEASE_TYPE }}
      package_name: ${{ steps.tag.outputs.PACKAGE_NAME }}
      pydoc_dir: ${{ steps.build.outputs.PYDOC_DIR }}
    steps:
      - name: Parse tag
        id: tag
        run: |
          tmp=${GITHUB_REF#refs/*/}; if [[ "${tmp%%/*}" == "python-test" ]]
          then
              echo "RELEASE_TYPE=test" >> $GITHUB_OUTPUT
          elif [[ "${tmp%%/*}" == "python" ]]
          then
              echo "RELEASE_TYPE=prod" >> $GITHUB_OUTPUT
          fi
          echo "RELEASE_VERSION=$(echo ${GITHUB_REF#refs/*/python*/*/})" >> $GITHUB_OUTPUT
          echo "PACKAGE_NAME=$(tmp=${GITHUB_REF#refs/*/python*/}; echo ${tmp%%/*})" >> $GITHUB_OUTPUT

      - name: Configure
        run: |
          mkdir -p ../build
          cd ../build
          rm -rf *
          cmake \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=../ytsaurus/clang.toolchain \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            ../ytsaurus

      - name: Build C++
        run: |
          cd ../build
          export CCACHE_BASEDIR="$(realpath ..)"
          export CCACHE_REMOTE_ONLY=true
          export CCACHE_REMOTE_STORAGE="${{ vars.CCACHE_REMOTE_STORAGE }}"
          ninja yson_lib driver_lib driver_rpc_lib

      - name: Build package
        id: build
        run: |
          echo "RELEASE_VERSION: ${{ steps.tag.outputs.RELEASE_VERSION }}"
          echo "PACKAGE_NAME: ${{ steps.tag.outputs.PACKAGE_NAME }}"
          echo "RELEASE_TYPE: ${{ steps.tag.outputs.RELEASE_TYPE }}"
          python3.11 -m venv ../venv
          source ../venv/bin/activate
          pip3 install -r ./yt/yt/scripts/pytest_requirements.txt
          YTSAURUS_PACKAGE_VERSION=${{ steps.tag.outputs.RELEASE_VERSION }} bash ./yt/python/packages/build_ytsaurus_packages.sh --ytsaurus-source-path $(pwd) --ytsaurus-build-path ../build --ytsaurus-package-name ${{ steps.tag.outputs.PACKAGE_NAME }}
          ytsaurus_python=$(realpath "../build/ytsaurus_python")
          mv "${ytsaurus_python}/$(echo ${{ steps.tag.outputs.PACKAGE_NAME }} | sed -E "s/-/_/g")_dist" dist

          pip3 install sphinx
          export DOCS_ROOT=$(realpath "../build/pydoc")
          mkdir "$DOCS_ROOT"
          cd "${ytsaurus_python}"
          PYTHONPATH="${ytsaurus_python}" sphinx-apidoc -F -o "$DOCS_ROOT" yt yt/packages yt/test_helpers yt/testlib yt/tool yt/environment yt/local yt/entry yt/operations_archive '*tests*'
          PYTHONPATH="${ytsaurus_python}" sphinx-build -b html "$DOCS_ROOT" "$DOCS_ROOT/_html"
          echo "PYDOC_DIR=$DOCS_ROOT/_html" >> $GITHUB_OUTPUT
          ls -la $DOCS_ROOT/_html
          ls -la $DOCS_ROOT/_html/_modules
          ls -la $DOCS_ROOT/_html/_modules/yt

  test_release:
    name: Run release TestPyPi
    needs:
      - build
      - checkout
      - start-vm
    if: ${{ needs.build.outputs.release_type == 'test' }}
    runs-on: ${{ needs.start-vm.outputs.label }}
    steps:
      - name: Publish pydoc
        uses: yc-actions/yc-obj-storage-upload@v1
        if: ${{ needs.build.outputs.package_name == 'ytsaurus-client' }}
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          bucket: ${{ secrets.TEST_PYDOC_S3_BUCKET }}
          root: ../build/pydoc/_html
          include: |
            _sources/*
            _static/*
            .doctrees/*
            _modules/yt/cli/*
            _modules/yt/clickhouse/*
            _modules/yt/tools/*
            _modules/yt/type_info/*
            _modules/yt/wire_format/*
            _modules/yt/wrapper/*
            _modules/yt/wrapper/schema/*
            _modules/yt/ypath/*
            _modules/yt/yson/*
            _modules/yt/*
            _modules/*
            *

      - name: Publish package distributions to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
            repository-url: https://test.pypi.org/legacy/
            password: ${{ secrets.TEST_PYPI_API_TOKEN }}

  prod_release:
    name: Run release PyPi
    needs:
      - build
      - checkout
      - start-vm
    if: ${{ needs.build.outputs.release_type == 'prod' }}
    runs-on: ${{ needs.start-vm.outputs.label }}
    steps:
      - name: Publish pydoc
        uses: yc-actions/yc-obj-storage-upload@v1
        if: ${{ needs.build.outputs.package_name == 'ytsaurus-client' }}
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          bucket: ${{ secrets.PYDOC_S3_BUCKET }}
          root: ${{ needs.build.outputs.pydoc_dir }}
          include: |
            _sources/*
            _static/*
            .doctrees/*
            _modules/yt/cli/*
            _modules/yt/clickhouse/*
            _modules/yt/tools/*
            _modules/yt/type_info/*
            _modules/yt/wire_format/*
            _modules/yt/wrapper/*
            _modules/yt/wrapper/schema/*
            _modules/yt/ypath/*
            _modules/yt/yson/*
            _modules/yt/*
            _modules/*
            *

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
            password: ${{ secrets.PYPI_API_TOKEN }}

  stop-vm:
    name: Stop VM
    needs:
      - start-vm
      - build
      - test_release
      - prod_release
    runs-on: trampoline
    if: ${{ always() }}
    steps:
      - name: Stop YC runner
        uses: yc-actions/yc-github-runner@v1
        with:
          mode: stop
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-vm.outputs.label }}
          instance-id: ${{ needs.start-vm.outputs.instance-id }}

  send-notifications:
    name: Send notifications
    needs:
      - stop-vm
    runs-on: trampoline
    if: ${{ failure() }}
    steps:
      - name: Send telegram message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          disable_web_page_preview: true
          format: markdown
          message: |
            Workflow *${{github.workflow}}* failed: ${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}.
            Git ${{github.ref_type}}: *${{github.ref_name}}*.
            Commit:
            ```
            ${{github.event.head_commit.message}}
            ```
